
                              程序的基本概念


+   gcc是linux平台的C编译器，编译后在在当前目录下生成可执行文件a.out，直接
    在命令行输入这个可执行文件的路径就可以执行它。如果不行把这个文件名叫 
    a.out,可以用gcc的-o参数自己指定文件名：

    $ gcc main.c -o main
    $ ./main
      
+   /*... ...*/结构是一个注释。不会被编译进目标代码。

+   c语言中每条语句末尾都要以一个分号结尾，但也有例外，复合语句就不以分号结尾。

+   编译时尽量打开-wall选项进行编译，gcc -wall main.c .
 
+   指令都是以字符#开始的，此字符可以把c程序中的指令和其他代码区分开来，指令
    的末尾既没有分号，也没有其他标记。
+   嵌入式：至少有一个pc机，但用户不知道。裸机开发，单片机，工业控制。操作系统开    发主要是数据处理，多任务的。
+   main 函数结尾用一条return语句结束，始终让main函数的返回值为0；这个值表明程序
    正常终止。

                       数据类型·常量·变量和表达式
                
+   %后面加个字母c ,d,f叫做占位符，是由printf解释的，转义序列是编译器在处理
    字符串字面值时转义的。

+   "5",'5',5
     分别是字符串，字符，整数。

+   变量是计算机存储器中的一块命名空间，可以在里面存储一个值，存储值可以随时变。

+   变量名以字符和下划行开头，由字母，下划行，数字组成。

+   + - * /是左结合的，等号是右结合。
                           
+   / 运算符，如果%d 打印，要求两侧都是整数，如果两侧存在浮点型数据，系统会把另一侧也转换成浮点型，之后%f打印。
                           
                           
                           
                           
                           位操作
                           
+   char -128~127,   0->0000 0000,-128->1000 0000.
+   取位，所取位用1保护，其余取0，按位与（&）把所取位取出。
+   a<<1;数字放在寄存器里，但a值不变。
    a<<=1;赋值之后a值才变。
+   数值计算时，占用空间少的向占用空间大的转换。也就是简单向复杂转换。
+   


                           递归调用

    语言函数可以自我调用。如果函数内部一个语句调用了函数自己，则称这个函数是
“递归”。递归是以自身定义的过程。也可称为“循环定义”。
    递归的例子很多。例如定义整数的递归方法是用数字1，2，3，4，5，6，7，8，9加
上或减去一个整数。例如，数字15是7+8；数字21是9+12；数字12是9+3。
    一种可递归的计算机语言，它的函数能够自己调用自己。一个简单的例子就是计算整
数阶乘的函数factor()数N的阶乘是1到N之间所有数字的乘积。例如3的阶乘是1×2×3，即
是６。
factor()和其等效函数fact()如例4-10所示。
   -----------------------------------------------------------------
    factor(n)
       int n;
       {
         int answer;
         if(n==1)
         return 1;
         answer=facter(n-1)*n;
         return(answer);

       }
   --------------------------------------------------------------------
    fact(n)
      int n;
     {
       int answer,i;
       answer=1;
       for(i=1;i<=n;i++)
       answer=answer*i;
       return answer;
         
     }
  -----------------------------------------------------------------------

    非递归函数fact()的执行应该是易于理解的。它应用一个从1开始到指定数值结束的
循环。在循环中，用“变化”的乘积依次去乘每个数。
    factor()的递归执行比fact()稍复杂。当用参数1调用factor()时，函数返回1；除此
之外的其它值调用将返回factor(n-1)*n这个乘积。为了求出这个表达式的值，用（n-1）
调用factor()一直到n等于1，调用开始返回。
    计算2的阶乘时对factor()的首次调用引起了以参数1对factor()的第二次调用。这次
调用返回1，然后被2乘（n的初始值），答案是2（把printf()语句插入到factor()中，察
看各级调用及其中间答案，是很有趣的）。
    当函数调用自己时，在栈中为新的局部变量和参数分配内存，函数的代码用这些变量
和参数重新运行。递归调用并不是把函数代码重新复制一遍，仅仅参数是新的。当每次递
归调用返回时，老的局部变量和参数就从栈中消除，从函数内此次函数调用点重新启动运
行。可递归的函数被说成是对自身的“推入和拉出”。
    大部分递归例程没有明显地减少代码规模和节省内存空间。另外，大部分例程的递归
形式比非递归形式运行速度要慢一些。这是因为附加的函数调用增加了时间开销（在许多
情况下，速度的差别不太明显）。对函数的多次递归调用可能造成堆栈的溢出。不过溢出
的可能性不大，因为函数的参数和局部变量是存放在堆栈中的。每次新的调用就会产生一
些变量的复制品。这个堆栈冲掉其它数据和程序的存储区域的可能性是存在的。但是除非
递归程序运行失控，否则不必为上述情况担心。
    递归函数的主要优点是可以把算法写的比使用非递归函数时更清晰更简洁，而且某些
问题，特别是与人工智能有关的问题，更适宜用递归方法。递归的另一个优点是，递归函
数不会受到怀疑，较非递归函数而言，某些人更相信递归函数。/*编写递归函数时，必须
在函数的某些地方使用if语句，强迫函数在未执行递归调用前返回。如果不这样做，在调
用函数后，它永远不会返回。在递归函数中不使用if语句，是一个很常见的错误。在开发
过程中广泛使用printf()和 getchar()可以看到执行过程，并且可以在发现错误后停止运行.*/

    
